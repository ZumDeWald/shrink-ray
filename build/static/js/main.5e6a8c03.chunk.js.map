{"version":3,"sources":["components/DragAndDrop.js","components/FileList.js","App.js","serviceWorker.js","index.js"],"names":["DragAndDrop","props","dropRef","useRef","useState","dragging","setDragging","dragCounter","handleDragIn","e","preventDefault","stopPropagation","dataTransfer","items","length","handleDragOut","handleDrag","handleDrop","files","handleDropProp","useEffect","div","current","addEventListener","style","display","position","ref","className","children","FileList","setImageProcessed","formats","setFiles","file","a","execute","buildInputFile","URL","createObjectURL","inputFiles","commands","outputFiles","exitCode","stderr","alert","join","loadImageElement","find","f","name","document","getElementById","downloadLink","zip","JSZip","zipFolder","folder","blob","generateAsync","type","then","imageBlobURL","href","passedFiles","fileList","newFiles","some","format","toLowerCase","endsWith","i","push","concat","magick","id","map","key","App","imageProcessed","src","alt","download","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e6a8c03.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nconst DragAndDrop = props => {\n  const dropRef = useRef(null);\n  const [dragging, setDragging] = useState(false);\n  let dragCounter = 0;\n\n  const handleDragIn = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (!!e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n      dragCounter += 1;\n      setDragging(true);\n    }\n  };\n\n  const handleDragOut = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    dragCounter -= 1;\n    if (dragCounter > 0) return;\n    setDragging(false);\n  };\n\n  const handleDrag = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDrop = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(false);\n    if (!!e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      props.handleDropProp(e.dataTransfer.files);\n      // e.dataTransfer.clearData();\n      dragCounter = 0;\n    }\n  };\n\n  useEffect(() => {\n    let div = dropRef.current;\n    div.addEventListener(\"dragenter\", handleDragIn);\n    div.addEventListener(\"dragleave\", handleDragOut);\n    div.addEventListener(\"dragover\", handleDrag);\n    div.addEventListener(\"drop\", handleDrop);\n  });\n\n  return (\n    <div\n      style={{ display: \"inline-block\", position: \"relative\" }}\n      ref={dropRef}\n    >\n      {!!dragging && (\n        <div className=\"drop-zone-overlay\">\n          <div>\n            <div>Set it down right here!!</div>\n          </div>\n        </div>\n      )}\n      {props.children}\n    </div>\n  );\n};\n\nexport default DragAndDrop;\n","import React, { useState } from \"react\";\nimport DragAndDrop from \"./DragAndDrop.js\";\nimport { execute, buildInputFile, loadImageElement } from \"wasm-imagemagick\";\nimport JSZip from \"jszip\";\n\nconst FileList = ({ setImageProcessed }) => {\n  const [formats] = useState([\"jpg\", \"jpeg\", \"png\"]);\n\n  const [files, setFiles] = useState([]);\n\n  async function magick(file) {\n    const { outputFiles, exitCode, stderr } = await execute({\n      inputFiles: [\n        await buildInputFile(URL.createObjectURL(file), \"image1.png\"),\n      ],\n      commands: [\n        `\n          convert image1.png -resize '1000' image2.png\n          convert image2.png -quality '70' final_v1.jpg\n          convert image1.png -resize '500' image3.png\n          convert image3.png -quality '45' final_v2.jpg\n        `,\n      ],\n    });\n    if (exitCode) {\n      alert(`There was an error with the command: ${stderr.join(\"\\n\")}`);\n    } else {\n      await loadImageElement(\n        outputFiles.find(f => f.name === \"final_v1.jpg\"),\n        document.getElementById(\"output-image\")\n      );\n\n      setImageProcessed(true);\n\n      let downloadLink = document.getElementById(\"download-link\");\n\n      let zip = new JSZip();\n\n      let zipFolder = zip.folder(\"processed\");\n\n      zipFolder.file(\n        `${file.name}_v1.jpg`,\n        outputFiles.find(f => f.name === \"final_v1.jpg\").blob\n      );\n\n      zipFolder.file(\n        `${file.name}_v2.jpg`,\n        outputFiles.find(f => f.name === \"final_v2.jpg\").blob\n      );\n\n      zip.generateAsync({ type: \"blob\" }).then(blob => {\n        let imageBlobURL = URL.createObjectURL(blob);\n        downloadLink.href = imageBlobURL;\n      });\n    }\n  }\n\n  const handleDropProp = passedFiles => {\n    //Existing file list\n    let fileList = [];\n\n    //Change passedFiles into array\n    let newFiles = [...passedFiles];\n\n    //Check if acceptable file type in formats array\n    if (\n      formats &&\n      newFiles.some(\n        file =>\n          !formats.some(format =>\n            file.name.toLowerCase().endsWith(format.toLowerCase())\n          )\n      )\n    ) {\n      alert(\n        `Only following file formats are acceptable: ${formats.join(\", \")}`\n      );\n      return;\n    }\n\n    for (let i = 0; i < newFiles.length; i++) {\n      if (!newFiles[i].name) return;\n      fileList.push(newFiles[i].name);\n    }\n\n    setFiles(files => files.concat(fileList));\n\n    //Display first image\n    // if (!!newFiles.length) {\n    //   document.querySelector(\"#test-image\").src = URL.createObjectURL(newFiles[0])\n    // };\n\n    //Trying the magick\n    magick(newFiles[0]);\n  };\n\n  return (\n    <DragAndDrop handleDropProp={handleDropProp}>\n      {files.length > 0 ? (\n        <ul id=\"drop-zone\">\n          {files.map((file, i) => (\n            <li key={`file ${i}`}>{file}</li>\n          ))}\n        </ul>\n      ) : (\n        <ul id=\"drop-zone\">\n          <li className=\"no-bg\">The Drop Zone</li>\n        </ul>\n      )}\n    </DragAndDrop>\n  );\n};\n\nexport default FileList;\n","import React, { useState } from \"react\";\nimport FileList from \"./components/FileList.js\";\nimport \"./App.css\";\n\nfunction App() {\n  const [imageProcessed, setImageProcessed] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Shrink Ray</h1>\n      </header>\n      <main>\n        <section className=\"drop-zone-container\">\n          <FileList setImageProcessed={setImageProcessed} />\n        </section>\n\n        <section\n          className={\n            imageProcessed\n              ? \"output-image-container\"\n              : \"output-image-container ghost\"\n          }\n        >\n          <img\n            id=\"output-image\"\n            src=\"https://images.unsplash.com/photo-1593935532255-a0574cc8fbf1?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=789&q=80\"\n            alt=\"Trying it\"\n          />\n\n          <div>\n            <a id=\"download-link\" href=\"/\" download=\"result.zip\">\n              <button className=\"download-button\">\n                Download Results From Last Upload\n              </button>\n            </a>\n          </div>\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}